# -*- coding: utf-8 -*-
"""CNN-fashion.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1C_J9fgX34VD_HE_vhHIcQpHd_Z5xogXs
"""

import tensorflow as tf
from tensorflow import keras
import numpy as np
import matplotlib.pyplot as plt

dataset = keras.datasets.fashion_mnist

(train_images, train_labels), (test_images, test_labels) = dataset.load_data()

# Normalize the images
train_images = train_images / 255.0
test_images = test_images / 255.0

# Define the model architecture
model = keras.Sequential([
    # Flatten layer to convert 2D input into 1D
    keras.layers.Flatten(input_shape=(28, 28)),
    # Dense layer with 128 neurons and ReLU activation function
    keras.layers.Dense(128, activation='relu'),
    # Output layer with 10 neurons and softmax activation function for classification
    keras.layers.Dense(10, activation='softmax')
])

# Compile the model
model.compile(optimizer='adam',
              loss='sparse_categorical_crossentropy',
              metrics=['accuracy'])

# Train the model
model.fit(train_images, train_labels, epochs=10)

# Evaluate the model
test_loss, test_acc = model.evaluate(test_images, test_labels)
print('Test accuracy:', test_acc)

# Make predictions and show example images with predicted labels
num_rows = 5
num_cols = 5
num_images = num_rows * num_cols

plt.figure(figsize=(2 * 2 * num_cols, 2 * num_rows))
for i in range(num_images):
    plt.subplot(num_rows, 2 * num_cols, 2 * i + 1)
    plt.imshow(test_images[i], cmap='gray')
    plt.axis('off')

    # Make predictions for the current image
    predictions = model.predict(np.expand_dims(test_images[i], axis=0))
    predicted_label = np.argmax(predictions)

    plt.subplot(num_rows, 2 * num_cols, 2 * i + 2)
    plt.bar(range(10), predictions[0])
    plt.xticks(range(10))
    plt.ylim([0, 1])
    plt.title(f"Predicted label: {predicted_label}")

plt.tight_layout()
plt.show()

