# -*- coding: utf-8 -*-
"""OCR.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19ub6dtTPB-byXXVbilHXPzQhoAAG7Ccp
"""

import numpy as np
import pandas as pd
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score

df = pd.read_csv("https://raw.githubusercontent.com/sahil-gidwani/DL/main/data/letter-recognition.csv")
df.head()

df.isnull().sum()

df.info()

x=df.iloc[:,1:].values
y=df.iloc[:,0].values

from sklearn.preprocessing import LabelEncoder

encoder = LabelEncoder()

y = encoder.fit_transform(y)

x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=1)

# model=SVC()
# model

from tensorflow.keras import models, layers

num_classes = len(np.unique(y))
input_shape = x_train.shape[1:]

model = models.Sequential()
model.add(layers.Dense(128, activation='relu', input_shape=input_shape))
model.add(layers.Dropout(0.5))
model.add(layers.Dense(64, activation='relu'))
model.add(layers.Dropout(0.5))
model.add(layers.Dense(num_classes, activation='softmax'))

model.compile(optimizer='adam',
              loss='sparse_categorical_crossentropy',
              metrics=['accuracy'])

model.fit(x_train, y_train, epochs=10, batch_size=32, validation_split=0.2)

y_pred=model.predict(x_test)

y_test

y_pred

from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, confusion_matrix

# Predict on test data
y_pred = model.predict(x_test)

# Convert predicted probabilities to class labels
y_pred_classes = np.argmax(y_pred, axis=1)

# Calculate accuracy
accuracy = accuracy_score(y_test, y_pred_classes)
print("Accuracy:", accuracy)

# Calculate macro-averaged precision
precision = precision_score(y_test, y_pred_classes, average='macro')
print("Precision (macro-averaged):", precision)

# Calculate macro-averaged recall
recall = recall_score(y_test, y_pred_classes, average='macro')
print("Recall (macro-averaged):", recall)

# Calculate macro-averaged F1-score
f1 = f1_score(y_test, y_pred_classes, average='macro')
print("F1-Score (macro-averaged):", f1)

# Calculate confusion matrix
conf_matrix = confusion_matrix(y_test, y_pred_classes)
print("Confusion Matrix:")
print(conf_matrix)